/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import BUS.KhuyenMaiBUS;
import BUS.SanPhamBUS;
import BUS.ThuongHieuBUS;
import DAO.DungTichDAO;
import DTO.KhuyenMaiDTO;
import DTO.SanPhamDTO;
import GUI.SPham.ChiTietSanPham;
import GUI.SPham.SuaSanPham;
import GUI.SPham.ThemSanPham;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Admin
 */
public class SanPham extends javax.swing.JPanel {

    private int oldVolumeId;

    public SanPham() {
        initComponents();
        addIcon();
        loadTableSanPham();
        setUpTable();
        centerTableData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTop = new javax.swing.JPanel();
        btnThemSP = new javax.swing.JButton();
        btnSuaSP = new javax.swing.JButton();
        btnXoaSP = new javax.swing.JButton();
        btnChiTietSP = new javax.swing.JButton();
        btnXuatExcelSP = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtTimKiem = new javax.swing.JTextField();
        pnlCenter = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSanPham = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(1200, 800));
        setLayout(new java.awt.BorderLayout());

        pnlTop.setBackground(new java.awt.Color(255, 255, 255));
        pnlTop.setPreferredSize(new java.awt.Dimension(1000, 80));

        btnThemSP.setText("Thêm");
        btnThemSP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThemSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemSPActionPerformed(evt);
            }
        });
        pnlTop.add(btnThemSP);

        btnSuaSP.setText("Sửa");
        btnSuaSP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSuaSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaSPActionPerformed(evt);
            }
        });
        pnlTop.add(btnSuaSP);

        btnXoaSP.setText("Xóa");
        btnXoaSP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnXoaSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaSPActionPerformed(evt);
            }
        });
        pnlTop.add(btnXoaSP);

        btnChiTietSP.setText("Chi tiết");
        btnChiTietSP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnChiTietSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChiTietSPActionPerformed(evt);
            }
        });
        pnlTop.add(btnChiTietSP);

        btnXuatExcelSP.setText("Xuất excel");
        btnXuatExcelSP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pnlTop.add(btnXuatExcelSP);

        jLabel1.setLabelFor(txtTimKiem);
        jLabel1.setText("Tìm kiếm :");
        pnlTop.add(jLabel1);

        txtTimKiem.setPreferredSize(new java.awt.Dimension(100, 30));
        txtTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimKiemActionPerformed(evt);
            }
        });
        pnlTop.add(txtTimKiem);

        add(pnlTop, java.awt.BorderLayout.NORTH);

        pnlCenter.setPreferredSize(new java.awt.Dimension(1200, 700));

        tblSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sản phẩm", "Tên sản phẩm", "Dung tích (ml)", "Số lượng tồn", "Giới tính", "Nồng độ", "Thương hiệu", "Giá nhập (VNĐ)", "Giá bán (VNĐ)"
            }
        ));
        jScrollPane2.setViewportView(tblSanPham);

        javax.swing.GroupLayout pnlCenterLayout = new javax.swing.GroupLayout(pnlCenter);
        pnlCenter.setLayout(pnlCenterLayout);
        pnlCenterLayout.setHorizontalGroup(
            pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1287, Short.MAX_VALUE)
        );
        pnlCenterLayout.setVerticalGroup(
            pnlCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
        );

        add(pnlCenter, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnChiTietSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChiTietSPActionPerformed
        int selectedRow = tblSanPham.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một sản phẩm để xem chi tiết.");
            return;
        }

        int perfumeId = (int) tblSanPham.getValueAt(selectedRow, 0);
        int volumeSize = (int) tblSanPham.getValueAt(selectedRow, 2);

        // Mở JPanel trong JDialog
        ChiTietSanPham panel = new ChiTietSanPham(perfumeId, volumeSize);

        JDialog dialog = new JDialog();
        dialog.setTitle("Chi tiết sản phẩm");
        dialog.setModal(true);
        dialog.setContentPane(panel);
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }//GEN-LAST:event_btnChiTietSPActionPerformed

    private void btnThemSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemSPActionPerformed
        // Tạo form thêm sản phẩm (JPanel)
        ThemSanPham form = new ThemSanPham();  // Đúng kiểu

        // ===== Tạo JFrame để chứa JPanel =====
        JFrame frame = new JFrame("Thêm sản phẩm");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.getContentPane().add(form);  // Thêm panel vào frame
        frame.pack();
        frame.setLocationRelativeTo(null);

        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                loadTableSanPham();
            }
        });
        // ===== Load thương hiệu =====
        ThuongHieuBUS thuongHieuBUS = new ThuongHieuBUS();
        ArrayList<String> brandNames = thuongHieuBUS.getAllBrandNames();
        form.getCbbThuongHieu().removeAllItems();
        for (String name : brandNames) {
            form.getCbbThuongHieu().addItem(name);
        }

        // ===== Load khuyến mãi =====
        KhuyenMaiBUS khuyenMaiBUS = new KhuyenMaiBUS();
        ArrayList<KhuyenMaiDTO> kmList = khuyenMaiBUS.getAllKhuyenMais();
        form.getCbbKhuyenMai().removeAllItems();
        for (KhuyenMaiDTO km : kmList) {
            form.getCbbKhuyenMai().addItem(km.getName());
        }

        // ===== Load dung tích =====
        DungTichDAO dungTichDAO = new DungTichDAO();
        ArrayList<Integer> volumes = dungTichDAO.getAllVolumeSizes();
        form.getCbbDungTich().removeAllItems();
        for (int size : volumes) {
            form.getCbbDungTich().addItem(String.valueOf(size));
        }

        // ===== Hiển thị form =====
        frame.setVisible(true);           // Sau đó mới hiển thị

    }//GEN-LAST:event_btnThemSPActionPerformed


    private void btnSuaSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaSPActionPerformed
        int row = tblSanPham.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm cần sửa!");
            return;
        }

        int perfumeId = (int) tblSanPham.getValueAt(row, 0);
        int volumeSize = (int) tblSanPham.getValueAt(row, 2); // cột dung tích

        Map<String, Object> sp = SanPhamBUS.getInstance().getChiTietSanPham(perfumeId, volumeSize);
        if (sp == null || sp.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy sản phẩm.");
            return;
        }

        SuaSanPham panel = new SuaSanPham();
        panel.setPerfumeId(perfumeId);
        panel.setSanPhamData(sp);
        panel.setOldVolumeId((int) sp.get("volume_id"));

        JFrame frame = new JFrame("Sửa sản phẩm");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setContentPane(panel);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

    }//GEN-LAST:event_btnSuaSPActionPerformed

    private void btnXoaSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaSPActionPerformed
        int row = tblSanPham.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm cần xóa!");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
                "Bạn có chắc muốn xóa sản phẩm này?", "Xác nhận xóa",
                JOptionPane.YES_NO_OPTION);

        if (confirm != JOptionPane.YES_OPTION) {
            return; // Người dùng chọn "Không"
        }

        int perfumeId = (int) tblSanPham.getValueAt(row, 0);
        int volumeSize = (int) tblSanPham.getValueAt(row, 2);

        boolean success = SanPhamBUS.getInstance().deleteSanPham(perfumeId, volumeSize);

        if (success) {
            JOptionPane.showMessageDialog(this, "Xóa sản phẩm thành công!");
            loadTableSanPham(); // cập nhật lại bảng
        } else {
            JOptionPane.showMessageDialog(this, "Xóa thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnXoaSPActionPerformed

    private void txtTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimKiemActionPerformed
        timKiemSanPham();
    }//GEN-LAST:event_txtTimKiemActionPerformed

    private void addIcon() {
        btnThemSP.setIcon(new FlatSVGIcon("./res/icon/add.svg"));
        btnSuaSP.setIcon(new FlatSVGIcon("./res/icon/edit.svg"));
        btnXoaSP.setIcon(new FlatSVGIcon("./res/icon/delete.svg"));
        btnChiTietSP.setIcon(new FlatSVGIcon("./res/icon/detail.svg"));
        btnXuatExcelSP.setIcon(new FlatSVGIcon("./res/icon/export_excel.svg"));
    }

    private void setUpTable() {
        // Set ẩn hiển thị ô vuông khi bấm vào cell 
        tblSanPham.setFocusable(false);

        // Set không cho cell có thể chỉnh sửa 
        tblSanPham.setDefaultEditor(Object.class, null);
    }

    public void centerTableData() {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);

        TableColumnModel columnModel = tblSanPham.getColumnModel();
        for (int i = 0; i < columnModel.getColumnCount(); i++) {
            columnModel.getColumn(i).setCellRenderer(centerRenderer);
        }
    }

    private void formatCurrencyField(javax.swing.JTextField textField) {
        String text = textField.getText().replace(",", "").trim();
        if (text.isEmpty()) {
            return;
        }

        try {
            double value = Double.parseDouble(text);
            textField.setText(String.format("%,d", (long) value));
        } catch (NumberFormatException e) {
            // Nếu nhập ký tự không hợp lệ thì bỏ qua không định dạng
        }
    }

    private void loadTableSanPham() {
        DefaultTableModel model = (DefaultTableModel) tblSanPham.getModel();
        model.setRowCount(0); // Clear table

        SanPhamBUS bus = new SanPhamBUS();
        List<SanPhamDTO> list = bus.getAllPerfumeViews(); // gọi từ BUS đã sửa

        DecimalFormat decimalFormat = new DecimalFormat("#,##0");

        for (SanPhamDTO p : list) {
            model.addRow(new Object[]{
                p.getId(),
                p.getName(),
                p.getVolumeSize(), // giả sử bạn đã thêm getter setVolumeSize
                p.getStock(),
                p.getSex(),
                p.getConcentration(),
                p.getBrandName(), // giả sử bạn đã thêm brandName vào DTO
                decimalFormat.format(p.getCost()),
                decimalFormat.format(p.getPrice())
            });
        }
    }

    private void timKiemSanPham() {
        String keyword = txtTimKiem.getText().trim(); // Ô tìm kiếm

        SanPhamBUS sanPhamBUS = SanPhamBUS.getInstance();
        ArrayList<SanPhamDTO> danhSach = (ArrayList<SanPhamDTO>) sanPhamBUS.getAllPerfumeViews(); // Lấy toàn bộ

        DefaultTableModel model = (DefaultTableModel) tblSanPham.getModel();
        model.setRowCount(0); // Xóa dữ liệu bảng cũ

        if (keyword.isEmpty()) {
            // Nếu không nhập gì thì hiển thị toàn bộ
            for (SanPhamDTO sp : danhSach) {
                model.addRow(new Object[]{
                    sp.getId(),
                    sp.getName(),
                    sp.getVolumeSize(),
                    sp.getStock(),
                    sp.getSex(),
                    sp.getConcentration(),
                    sp.getBrandName(),
                    String.format("%,.0f", sp.getCost()),
                    String.format("%,.0f", sp.getPrice())
                });
            }
            return;
        }

        try {
            int maTimKiem = Integer.parseInt(keyword);
            for (SanPhamDTO sp : danhSach) {
                if (sp.getId() == maTimKiem) {
                    model.addRow(new Object[]{
                        sp.getId(),
                        sp.getName(),
                        sp.getVolumeSize(),
                        sp.getStock(),
                        sp.getSex(),
                        sp.getConcentration(),
                        sp.getBrandName(),
                        String.format("%,.0f", sp.getCost()),
                        String.format("%,.0f", sp.getPrice())
                    });
                }
            }
        } catch (NumberFormatException e) {
            for (SanPhamDTO sp : danhSach) {
                if (sp.getName().toLowerCase().contains(keyword.toLowerCase())) {
                    model.addRow(new Object[]{
                        sp.getId(),
                        sp.getName(),
                        sp.getVolumeSize(),
                        sp.getStock(),
                        sp.getSex(),
                        sp.getConcentration(),
                        sp.getBrandName(),
                        String.format("%,.0f", sp.getCost()),
                        String.format("%,.0f", sp.getPrice())
                    });
                }
            }
        }
    }

    public void setOldVolumeId(int oldVolumeId) {
        this.oldVolumeId = oldVolumeId;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChiTietSP;
    private javax.swing.JButton btnSuaSP;
    private javax.swing.JButton btnThemSP;
    private javax.swing.JButton btnXoaSP;
    private javax.swing.JButton btnXuatExcelSP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JPanel pnlTop;
    private javax.swing.JTable tblSanPham;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables

}
