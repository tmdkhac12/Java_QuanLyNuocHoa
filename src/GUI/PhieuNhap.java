/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import BUS.PhieuNhapBUS;
import DAO.NhaCungCapDAO;
import DAO.PhieuNhapDAO;
import DTO.NhaCungCapDTO;
import DTO.PhieuNhapDTO;
import GUI.PNhap.ChiTietPhieuNhap;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;
import java.text.SimpleDateFormat;

/**
 *
 * @author hoang
 */
public class PhieuNhap extends javax.swing.JPanel {

    private PhieuNhapBUS phieuNhapBUS;

    /**
     * Creates new form PhieuNhap
     */
    public PhieuNhap() {
        initComponents();
        loadPhieuNhapToTable();
        initAtt();
        centerTableData();
        setUpTable();
        addIcon();
        loadComboBoxNCC();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        mainContentPN = new javax.swing.JPanel();
        pnlTop = new javax.swing.JPanel();
        btnThemPN = new javax.swing.JButton();
        btnChiTietPN = new javax.swing.JButton();
        btnXoaPN = new javax.swing.JButton();
        btnXuatExcelPN = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtTimKiem = new javax.swing.JTextField();
        btnLamMoi = new javax.swing.JButton();
        pnlBottom = new javax.swing.JPanel();
        scpnlshow = new javax.swing.JScrollPane();
        tblPhieuNhap = new javax.swing.JTable();
        pnlLoc = new javax.swing.JPanel();
        comboboxNCC = new javax.swing.JComboBox<>();
        txtnhacungcap1 = new javax.swing.JLabel();
        txtnhacungcap2 = new javax.swing.JLabel();
        txtnhacungcap3 = new javax.swing.JLabel();
        txtnhacungcap4 = new javax.swing.JLabel();
        txtmaxprice = new javax.swing.JTextField();
        txtnhacungcap5 = new javax.swing.JLabel();
        txtminprice = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        txtngaydau = new javax.swing.JTextField();
        txtngaycuoi = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        mainContentPN.setBackground(new java.awt.Color(240, 247, 250));
        mainContentPN.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        mainContentPN.setPreferredSize(new java.awt.Dimension(1300, 800));
        mainContentPN.setLayout(new java.awt.BorderLayout());

        pnlTop.setBackground(new java.awt.Color(255, 255, 255));
        pnlTop.setPreferredSize(new java.awt.Dimension(1200, 70));

        btnThemPN.setText("Thêm");
        btnThemPN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemPNActionPerformed(evt);
            }
        });
        pnlTop.add(btnThemPN);

        btnChiTietPN.setText("Chi tiết");
        btnChiTietPN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChiTietPNActionPerformed(evt);
            }
        });
        pnlTop.add(btnChiTietPN);

        btnXoaPN.setText("Xóa");
        btnXoaPN.setToolTipText("");
        btnXoaPN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaPNActionPerformed(evt);
            }
        });
        pnlTop.add(btnXoaPN);

        btnXuatExcelPN.setText("Xuất excel");
        btnXuatExcelPN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatExcelPNActionPerformed(evt);
            }
        });
        pnlTop.add(btnXuatExcelPN);

        jLabel1.setText("Tìm kiếm :");
        pnlTop.add(jLabel1);

        txtTimKiem.setPreferredSize(new java.awt.Dimension(300, 30));
        txtTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimKiemActionPerformed(evt);
            }
        });
        txtTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemKeyReleased(evt);
            }
        });
        pnlTop.add(txtTimKiem);

        btnLamMoi.setText("Làm mới");
        btnLamMoi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLamMoi.setPreferredSize(new java.awt.Dimension(130, 60));
        btnLamMoi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLamMoiMouseClicked(evt);
            }
        });
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });
        pnlTop.add(btnLamMoi);

        mainContentPN.add(pnlTop, java.awt.BorderLayout.NORTH);

        pnlBottom.setBackground(new java.awt.Color(240, 247, 250));
        pnlBottom.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 0, 0, 0));

        tblPhieuNhap.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã phiếu nhập", "Nhà cung cấp", "Thời gian", "Tổng tiền"
            }
        ));
        scpnlshow.setViewportView(tblPhieuNhap);
        if (tblPhieuNhap.getColumnModel().getColumnCount() > 0) {
            tblPhieuNhap.getColumnModel().getColumn(0).setPreferredWidth(50);
        }

        pnlLoc.setBackground(new java.awt.Color(255, 255, 255));
        pnlLoc.setPreferredSize(new java.awt.Dimension(270, 700));

        comboboxNCC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả" }));
        comboboxNCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxNCCActionPerformed(evt);
            }
        });

        txtnhacungcap1.setText("Đến số tiền (VND)");

        txtnhacungcap2.setText("Từ ngày");

        txtnhacungcap3.setText("Đến ngày");

        txtnhacungcap4.setText("Nhà cung cấp");

        txtmaxprice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtmaxpriceActionPerformed(evt);
            }
        });
        txtmaxprice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtmaxpriceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtmaxpriceKeyReleased(evt);
            }
        });

        txtnhacungcap5.setText("Từ số tiền (VND)");

        txtminprice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtminpriceActionPerformed(evt);
            }
        });
        txtminprice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtminpriceKeyReleased(evt);
            }
        });

        btnTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icon/glass_12861007.png"))); // NOI18N
        btnTimKiem.setText("Tìm kiếm");
        btnTimKiem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTimKiem.setPreferredSize(new java.awt.Dimension(130, 60));
        btnTimKiem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTimKiemMouseClicked(evt);
            }
        });
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        txtngaydau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtngaydauActionPerformed(evt);
            }
        });

        txtngaycuoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtngaycuoiActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("*Ngày nhập theo định dạng: yyyy-MM-dd ");

        javax.swing.GroupLayout pnlLocLayout = new javax.swing.GroupLayout(pnlLoc);
        pnlLoc.setLayout(pnlLocLayout);
        pnlLocLayout.setHorizontalGroup(
            pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLocLayout.createSequentialGroup()
                .addGroup(pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlLocLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(txtngaycuoi))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlLocLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtmaxprice)
                                    .addComponent(comboboxNCC, javax.swing.GroupLayout.Alignment.LEADING, 0, 248, Short.MAX_VALUE)
                                    .addComponent(txtnhacungcap2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtnhacungcap1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtnhacungcap3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(txtnhacungcap4, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtnhacungcap5, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlLocLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(txtminprice, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlLocLayout.createSequentialGroup()
                            .addGap(68, 68, 68)
                            .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlLocLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtngaydau, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        pnlLocLayout.setVerticalGroup(
            pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLocLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtnhacungcap4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboboxNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtnhacungcap2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtngaydau, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(txtnhacungcap3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtngaycuoi, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(txtnhacungcap5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtminprice, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtnhacungcap1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtmaxprice, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(180, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlBottomLayout = new javax.swing.GroupLayout(pnlBottom);
        pnlBottom.setLayout(pnlBottomLayout);
        pnlBottomLayout.setHorizontalGroup(
            pnlBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBottomLayout.createSequentialGroup()
                .addComponent(pnlLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpnlshow, javax.swing.GroupLayout.DEFAULT_SIZE, 840, Short.MAX_VALUE))
        );
        pnlBottomLayout.setVerticalGroup(
            pnlBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBottomLayout.createSequentialGroup()
                .addGroup(pnlBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scpnlshow)
                    .addGroup(pnlBottomLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(pnlLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        mainContentPN.add(pnlBottom, java.awt.BorderLayout.CENTER);

        add(mainContentPN, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initAtt() {
        phieuNhapBUS = new PhieuNhapBUS();
    }

    public void centerTableData() {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);

        TableColumnModel columnModel = tblPhieuNhap.getColumnModel();
        for (int i = 0; i < columnModel.getColumnCount(); i++) {
            columnModel.getColumn(i).setCellRenderer(centerRenderer);
        }
    }


    private void btnThemPNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemPNActionPerformed
        JPanel panel = new GUI.Panel.ThemPhieuNhap();
        JFrame frame = new JFrame("Tạo Phiếu Nhập");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.getContentPane().add(panel);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }//GEN-LAST:event_btnThemPNActionPerformed

    private void btnChiTietPNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChiTietPNActionPerformed
        PhieuNhapDTO selectedPhieuNhap = getSelectedRowPhieuNhap();
        if (selectedPhieuNhap != null) {
            int maPhieu = selectedPhieuNhap.getId();
            JPanel panel = new ChiTietPhieuNhap(maPhieu);
            JFrame frame = new JFrame("Chi tiết Phiếu Nhập");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.getContentPane().add(panel);
            frame.pack();
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn phiếu nhập cần xem chi tiết.");
        }
    }//GEN-LAST:event_btnChiTietPNActionPerformed

    private void btnXoaPNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaPNActionPerformed
        PhieuNhapDTO selectedPhieuNhap = this.getSelectedRowPhieuNhap(); // Lấy dòng được chọn
        if (selectedPhieuNhap != null) {
            int id = selectedPhieuNhap.getId();

            int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa phiếu nhập này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                if (phieuNhapBUS.deletePhieuNhap(id)) {
                    JOptionPane.showMessageDialog(this, "Xóa phiếu nhập thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    updateTable(null, 2); // load lại bảng
                } else {
                    JOptionPane.showMessageDialog(this, "Xóa phiếu nhập thất bại", "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn phiếu nhập muốn xóa");
        }
    }//GEN-LAST:event_btnXoaPNActionPerformed

    private void btnXuatExcelPNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatExcelPNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnXuatExcelPNActionPerformed

    private void txtTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimKiemActionPerformed

    }//GEN-LAST:event_txtTimKiemActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        PhieuNhapDAO phieuNhapDAO = new PhieuNhapDAO();
        ArrayList<PhieuNhapDTO> danhSach = phieuNhapDAO.getAllPhieuNhap();

        DefaultTableModel model = (DefaultTableModel) tblPhieuNhap.getModel();
        model.setRowCount(0); // Xóa hết dòng, giữ nguyên cấu trúc cột

        for (PhieuNhapDTO phieu : danhSach) {
            Object[] row = new Object[]{
                phieu.getId(),
                phieu.getSupplierName(),
                phieu.getImportDate(),
                String.format("%,.0f", phieu.getTotalCost())
            };
            model.addRow(row);
        }
    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void comboboxNCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxNCCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboboxNCCActionPerformed

    private void btnLamMoiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLamMoiMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLamMoiMouseClicked

    private void txtminpriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtminpriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtminpriceActionPerformed

    private void txtmaxpriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtmaxpriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtmaxpriceActionPerformed

    private void txtmaxpriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmaxpriceKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtmaxpriceKeyPressed

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        String selectedSupplier = (String) comboboxNCC.getSelectedItem(); // Nhà cung cấp
        String tuNgayStr = txtngaydau.getText().trim(); // Từ ngày
        String denNgayStr = txtngaycuoi.getText().trim(); // Đến ngày
        String tuTienStr = txtminprice.getText().trim(); // Từ số tiền
        String denTienStr = txtmaxprice.getText().trim(); // Đến số tiền

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date tuNgay = null;
        java.util.Date denNgay = null;
        Double tuTien = null;
        Double denTien = null;

        try {
            if (!tuNgayStr.isEmpty()) {
                tuNgay = sdf.parse(tuNgayStr);
            }
            if (!denNgayStr.isEmpty()) {
                denNgay = sdf.parse(denNgayStr);
            }
            if (tuNgay != null && denNgay != null && tuNgay.after(denNgay)) {
                JOptionPane.showMessageDialog(this, "Khoảng thời gian không hợp lệ!");
                return;
            }

            if (!tuTienStr.isEmpty()) {
                tuTien = Double.parseDouble(tuTienStr.replace(",", ""));
            }
            if (!denTienStr.isEmpty()) {
                denTien = Double.parseDouble(denTienStr.replace(",", ""));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Định dạng ngày hoặc số tiền không hợp lệ!");
            return;
        }

        PhieuNhapBUS phieuNhapBUS = new PhieuNhapBUS();
        ArrayList<PhieuNhapDTO> danhSachPhieuNhap = phieuNhapBUS.getAllPhieuNhap();

        DefaultTableModel model = (DefaultTableModel) tblPhieuNhap.getModel();
        model.setRowCount(0);

        for (PhieuNhapDTO pn : danhSachPhieuNhap) {
            boolean hopLe = true;

            // 1. Lọc nhà cung cấp
            if (!selectedSupplier.equals("Tất cả") && !pn.getSupplierName().equals(selectedSupplier)) {
                hopLe = false;
            }

            // 2. Lọc theo ngày
            java.util.Date ngayNhap = pn.getImportDate();
            if (tuNgay != null && ngayNhap.before(tuNgay)) {
                hopLe = false;
            }
            if (denNgay != null && ngayNhap.after(denNgay)) {
                hopLe = false;
            }

            // 3. Lọc theo tổng tiền
            double tongTien = pn.getTotalCost();
            if (tuTien != null && tongTien < tuTien) {
                hopLe = false;
            }
            if (denTien != null && tongTien > denTien) {
                hopLe = false;
            }

            if (hopLe) {
                Object[] row = new Object[]{
                    pn.getId(),
                    pn.getSupplierName(),
                    pn.getImportDate(),
                    String.format("%,.0f", tongTien)
                };
                model.addRow(row);
            }

        }
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void btnTimKiemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTimKiemMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnTimKiemMouseClicked

    private void txtngaydauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtngaydauActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtngaydauActionPerformed

    private void txtngaycuoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtngaycuoiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtngaycuoiActionPerformed

    private void txtminpriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtminpriceKeyReleased
        formatCurrencyField(txtminprice);
    }//GEN-LAST:event_txtminpriceKeyReleased

    private void txtmaxpriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmaxpriceKeyReleased
        formatCurrencyField(txtmaxprice);
    }//GEN-LAST:event_txtmaxpriceKeyReleased

    private void txtTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemKeyReleased
        timKiemPhieuNhap();
    }//GEN-LAST:event_txtTimKiemKeyReleased

    private void formatCurrencyField(javax.swing.JTextField textField) {
        String text = textField.getText().replace(",", "").trim();
        if (text.isEmpty()) {
            return;
        }

        try {
            double value = Double.parseDouble(text);
            textField.setText(String.format("%,d", (long) value));
        } catch (NumberFormatException e) {
            // Nếu nhập ký tự không hợp lệ thì bỏ qua không định dạng
        }
    }

    private void timKiemPhieuNhap() {
        String keyword = txtTimKiem.getText().trim();

        PhieuNhapBUS phieuNhapBUS = new PhieuNhapBUS();
        ArrayList<PhieuNhapDTO> danhSach = phieuNhapBUS.getAllPhieuNhap();

        DefaultTableModel model = (DefaultTableModel) tblPhieuNhap.getModel();
        model.setRowCount(0); // Xóa bảng cũ

        if (keyword.isEmpty()) {
            // Nếu ô tìm kiếm trống, load lại toàn bộ
            for (PhieuNhapDTO phieu : danhSach) {
                model.addRow(new Object[]{
                    phieu.getId(),
                    phieu.getSupplierName(),
                    phieu.getImportDate(),
                    String.format("%,.0f", phieu.getTotalCost())
                });
            }
            return;
        }

        try {
            int maTimKiem = Integer.parseInt(keyword);
            for (PhieuNhapDTO phieu : danhSach) {
                if (phieu.getId() == maTimKiem) {
                    model.addRow(new Object[]{
                        phieu.getId(),
                        phieu.getSupplierName(),
                        phieu.getImportDate(),
                        String.format("%,.0f", phieu.getTotalCost())
                    });
                }
            }
        } catch (NumberFormatException e) {
            // Nếu gõ không phải số (ví dụ chữ) thì không làm gì hết
        }
    }

    private void setUpTable() {
        // Set ẩn hiển thị ô vuông khi bấm vào cell 
        tblPhieuNhap.setFocusable(false);

        // Set không cho cell có thể chỉnh sửa 
        tblPhieuNhap.setDefaultEditor(Object.class, null);
    }

    private PhieuNhapDTO getSelectedRowPhieuNhap() {
        int selectedRowIndex = tblPhieuNhap.getSelectedRow();

        if (selectedRowIndex == -1) {
            return null;
        }

        int id = (int) tblPhieuNhap.getValueAt(selectedRowIndex, 0);
        return phieuNhapBUS.getPhieuNhap(id);
    }

    private void addIcon() {
        btnThemPN.setIcon(new FlatSVGIcon("./res/icon/add.svg"));
        btnXoaPN.setIcon(new FlatSVGIcon("./res/icon/delete.svg"));
        btnChiTietPN.setIcon(new FlatSVGIcon("./res/icon/detail.svg"));
        btnXuatExcelPN.setIcon(new FlatSVGIcon("./res/icon/export_excel.svg"));
        btnLamMoi.setIcon(new FlatSVGIcon("./res/icon/refresh.svg"));
    }

    private void loadPhieuNhapToTable() {
        PhieuNhapBUS phieuNhapBUS = new PhieuNhapBUS();
        ArrayList<PhieuNhapDTO> danhSachPhieuNhap = phieuNhapBUS.getAllPhieuNhap();

        DefaultTableModel model = (DefaultTableModel) tblPhieuNhap.getModel();
        model.setRowCount(0); // Xóa dữ liệu cũ

        DecimalFormat decimalFormat = new DecimalFormat("#,##0");

        for (PhieuNhapDTO pn : danhSachPhieuNhap) {
            Object[] row = new Object[]{
                pn.getId(),
                pn.getSupplierName(),
                pn.getImportDate(),
                decimalFormat.format(pn.getTotalCost())
            };
            model.addRow(row);
        }
    }

    public void updateTable(PhieuNhapDTO phieuNhapDTO, int code) {
        // 1: Thêm, 2: Xóa
        DefaultTableModel model = (DefaultTableModel) tblPhieuNhap.getModel();

        if (code == 1) {
            model.addRow(new Object[]{
                phieuNhapDTO.getId(),
                phieuNhapDTO.getSupplierName(),
                phieuNhapDTO.getImportDate(),
                phieuNhapDTO.getTotalCost()
            });
        } else if (code == 2) {
            int selectedRow = tblPhieuNhap.getSelectedRow();
            if (selectedRow != -1) {
                model.removeRow(selectedRow);
            }
        }
    }

    private void loadComboBoxNCC() {
        comboboxNCC.removeAllItems();
        comboboxNCC.addItem("Tất cả");

        List<NhaCungCapDTO> nhacungcap = NhaCungCapDAO.getAll();
        for (NhaCungCapDTO ncc : nhacungcap) {
            comboboxNCC.addItem(ncc.getName());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChiTietPN;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnThemPN;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JButton btnXoaPN;
    private javax.swing.JButton btnXuatExcelPN;
    public javax.swing.JComboBox<String> comboboxNCC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel mainContentPN;
    private javax.swing.JPanel pnlBottom;
    private javax.swing.JPanel pnlLoc;
    private javax.swing.JPanel pnlTop;
    private javax.swing.JScrollPane scpnlshow;
    public javax.swing.JTable tblPhieuNhap;
    private javax.swing.JTextField txtTimKiem;
    public javax.swing.JTextField txtmaxprice;
    public javax.swing.JTextField txtminprice;
    private javax.swing.JTextField txtngaycuoi;
    private javax.swing.JTextField txtngaydau;
    private javax.swing.JLabel txtnhacungcap1;
    private javax.swing.JLabel txtnhacungcap2;
    private javax.swing.JLabel txtnhacungcap3;
    private javax.swing.JLabel txtnhacungcap4;
    private javax.swing.JLabel txtnhacungcap5;
    // End of variables declaration//GEN-END:variables

}
