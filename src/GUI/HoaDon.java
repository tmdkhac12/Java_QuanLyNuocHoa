/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import com.formdev.flatlaf.extras.FlatSVGIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;
import BUS.HoaDonBUS;
import BUS.KhachHangBUS;
import BUS.NhanVienBUS;
import DTO.HoaDonDTO;
import DAO.HoaDonDAO;
import DTO.KhachHangDTO;
import DTO.NhanVienDTO;
import GUI.HDon.ChiTietHoaDon;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author hoang
 */
public class HoaDon extends javax.swing.JPanel {

    private HoaDonBUS hoaDonBUS = new HoaDonBUS();
    private ArrayList<HoaDonDTO> danhSachHoaDon = new ArrayList<>();

    public HoaDon() {
        initComponents();
        loadHoaDonToTable();
        centerTableData();
        setUpTable();
        addIcon();
        loadKhachHangToComboBox();
        loadNhanVienToComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainContentPX = new javax.swing.JPanel();
        pnlTop = new javax.swing.JPanel();
        btnThemPX = new javax.swing.JButton();
        btnChiTietPX = new javax.swing.JButton();
        btnXoaHD = new javax.swing.JButton();
        btnXuatExcelPX = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtTimKiem = new javax.swing.JTextField();
        btnLamMoi = new javax.swing.JButton();
        pnlBottom = new javax.swing.JPanel();
        scpnltable = new javax.swing.JScrollPane();
        tblHoaDon = new javax.swing.JTable();
        pnlLoc = new javax.swing.JPanel();
        txtnhacungcap = new javax.swing.JLabel();
        comboboxKH = new javax.swing.JComboBox<>();
        txtnhacungcap1 = new javax.swing.JLabel();
        txtnhacungcap2 = new javax.swing.JLabel();
        comboboxNV = new javax.swing.JComboBox<>();
        txtnhacungcap3 = new javax.swing.JLabel();
        txtnhacungcap4 = new javax.swing.JLabel();
        txtmaxprice = new javax.swing.JTextField();
        txtnhacungcap5 = new javax.swing.JLabel();
        txtminprice = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        txtngaydau = new javax.swing.JTextField();
        txtngaycuoi = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        mainContentPX.setBackground(new java.awt.Color(240, 247, 250));
        mainContentPX.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        mainContentPX.setPreferredSize(new java.awt.Dimension(1300, 800));
        mainContentPX.setLayout(new java.awt.BorderLayout());

        pnlTop.setBackground(new java.awt.Color(255, 255, 255));
        pnlTop.setPreferredSize(new java.awt.Dimension(1200, 70));

        btnThemPX.setText("Thêm");
        btnThemPX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemHDActionPerformed(evt);
            }
        });
        pnlTop.add(btnThemPX);

        btnChiTietPX.setText("Chi tiết");
        btnChiTietPX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChiTietHDActionPerformed(evt);
            }
        });
        pnlTop.add(btnChiTietPX);

        btnXoaHD.setText("Xóa");
        btnXoaHD.setEnabled(false);
        btnXoaHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyHDActionPerformed(evt);
            }
        });
        pnlTop.add(btnXoaHD);
        btnXoaHD.getAccessibleContext().setAccessibleName("Hủy");

        btnXuatExcelPX.setText("Xuất excel");
        btnXuatExcelPX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatExcelPXActionPerformed(evt);
            }
        });
        pnlTop.add(btnXuatExcelPX);

        jLabel1.setText("Tìm kiếm :");
        pnlTop.add(jLabel1);

        txtTimKiem.setPreferredSize(new java.awt.Dimension(300, 30));
        txtTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimKiemActionPerformed(evt);
            }
        });
        pnlTop.add(txtTimKiem);

        btnLamMoi.setText("Làm mới");
        btnLamMoi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLamMoi.setPreferredSize(new java.awt.Dimension(130, 60));
        btnLamMoi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLamMoiMouseClicked(evt);
            }
        });
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });
        pnlTop.add(btnLamMoi);

        mainContentPX.add(pnlTop, java.awt.BorderLayout.NORTH);

        pnlBottom.setBackground(new java.awt.Color(240, 247, 250));
        pnlBottom.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 0, 0, 0));

        tblHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã hóa đơn", "Khách hàng", "Nhân viên", "Thời gian", "Tổng tiền"
            }
        ));
        tblHoaDon.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblHoaDon.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scpnltable.setViewportView(tblHoaDon);
        if (tblHoaDon.getColumnModel().getColumnCount() > 0) {
            tblHoaDon.getColumnModel().getColumn(0).setPreferredWidth(50);
        }

        pnlLoc.setBackground(new java.awt.Color(255, 255, 255));
        pnlLoc.setPreferredSize(new java.awt.Dimension(270, 700));

        txtnhacungcap.setText("Nhân viên bán hàng");

        comboboxKH.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả" }));

        txtnhacungcap1.setText("Đến số tiền (VND)");

        txtnhacungcap2.setText("Từ ngày");

        comboboxNV.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả" }));

        txtnhacungcap3.setText("Đến ngày");

        txtnhacungcap4.setText("Khách hàng");

        txtmaxprice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtmaxpriceActionPerformed(evt);
            }
        });
        txtmaxprice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtmaxpriceKeyReleased(evt);
            }
        });

        txtnhacungcap5.setText("Từ số tiền (VND)");

        txtminprice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtminpriceActionPerformed(evt);
            }
        });
        txtminprice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtminpriceKeyReleased(evt);
            }
        });

        btnTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icon/glass_12861007.png"))); // NOI18N
        btnTimKiem.setText("Tìm kiếm");
        btnTimKiem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTimKiem.setPreferredSize(new java.awt.Dimension(130, 60));
        btnTimKiem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTimKiemMouseClicked(evt);
            }
        });
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        txtngaydau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtngaydauActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("*Ngày nhập theo định dạng: yyyy-MM-dd ");

        javax.swing.GroupLayout pnlLocLayout = new javax.swing.GroupLayout(pnlLoc);
        pnlLoc.setLayout(pnlLocLayout);
        pnlLocLayout.setHorizontalGroup(
            pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLocLayout.createSequentialGroup()
                .addGroup(pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlLocLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtminprice)
                                    .addGroup(pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtmaxprice)
                                            .addGroup(pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(comboboxKH, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(txtnhacungcap, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtnhacungcap2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtnhacungcap1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(comboboxNV, javax.swing.GroupLayout.Alignment.TRAILING, 0, 248, Short.MAX_VALUE))
                                                .addComponent(txtnhacungcap3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(txtnhacungcap4, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtnhacungcap5, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(pnlLocLayout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlLocLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(txtngaydau)))
                    .addGroup(pnlLocLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtngaycuoi, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        pnlLocLayout.setVerticalGroup(
            pnlLocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLocLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtnhacungcap4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboboxKH, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(txtnhacungcap, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboboxNV, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(txtnhacungcap2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtngaydau, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtnhacungcap3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtngaycuoi, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(20, 20, 20)
                .addComponent(txtnhacungcap5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtminprice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(txtnhacungcap1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtmaxprice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlBottomLayout = new javax.swing.GroupLayout(pnlBottom);
        pnlBottom.setLayout(pnlBottomLayout);
        pnlBottomLayout.setHorizontalGroup(
            pnlBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBottomLayout.createSequentialGroup()
                .addComponent(pnlLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpnltable, javax.swing.GroupLayout.DEFAULT_SIZE, 899, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlBottomLayout.setVerticalGroup(
            pnlBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBottomLayout.createSequentialGroup()
                .addGroup(pnlBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlLoc, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
                    .addComponent(scpnltable))
                .addContainerGap())
        );

        mainContentPX.add(pnlBottom, java.awt.BorderLayout.CENTER);

        add(mainContentPX, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    public void centerTableData() {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);

        TableColumnModel columnModel = tblHoaDon.getColumnModel();
        for (int i = 0; i < columnModel.getColumnCount(); i++) {
            columnModel.getColumn(i).setCellRenderer(centerRenderer);
        }
    }
    private void btnThemHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemHDActionPerformed
        JPanel panel = new GUI.Panel.ThemHoaDon();
        JFrame frame = new JFrame("Thêm hóa đơn");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.getContentPane().add(panel);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }//GEN-LAST:event_btnThemHDActionPerformed

    private void btnChiTietHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChiTietHDActionPerformed
        try {
            HoaDonDTO selectedHoaDon = getSelectedRowHoaDon(); // Hàm lấy hóa đơn đang chọn từ bảng
            if (selectedHoaDon == null) {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn hóa đơn cần xem chi tiết.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            int maHoaDon = selectedHoaDon.getId(); // hoặc getInvoiceId() tùy tên DTO bạn
            ChiTietHoaDon panel = new ChiTietHoaDon(maHoaDon); // mở form chi tiết hóa đơn

            JFrame frame = new JFrame("Chi tiết Hóa Đơn");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.setContentPane(panel);
            frame.pack();
            frame.setLocationRelativeTo(this);
            frame.setVisible(true);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi mở chi tiết hóa đơn.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnChiTietHDActionPerformed


    private void btnHuyHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyHDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnHuyHDActionPerformed

    private void btnXuatExcelPXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatExcelPXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnXuatExcelPXActionPerformed

    private void txtTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimKiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimKiemActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void txtmaxpriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtmaxpriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtmaxpriceActionPerformed

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        String selectedKhachHang = (String) comboboxKH.getSelectedItem();
        String selectedNhanVien = (String) comboboxNV.getSelectedItem();
        String tuNgayStr = txtngaydau.getText().trim();
        String denNgayStr = txtngaycuoi.getText().trim();
        String tuTienStr = txtminprice.getText().trim();
        String denTienStr = txtmaxprice.getText().trim();

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date tuNgay = null;
        Date denNgay = null;
        try {
            if (!tuNgayStr.isEmpty()) {
                tuNgay = sdf.parse(tuNgayStr);
            }
            if (!denNgayStr.isEmpty()) {
                denNgay = sdf.parse(denNgayStr);
            }
            if (tuNgay != null && denNgay != null && tuNgay.after(denNgay)) {
                JOptionPane.showMessageDialog(this, "Khoảng thời gian không hợp lệ!");
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ngày phải đúng định dạng yyyy-MM-dd!");
            return;
        }

        Double tuTien = null;
        Double denTien = null;
        try {
            if (!tuTienStr.isEmpty()) {
                tuTien = Double.parseDouble(tuTienStr.replace(",", ""));
            }
            if (!denTienStr.isEmpty()) {
                denTien = Double.parseDouble(denTienStr.replace(",", ""));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Số tiền phải là số hợp lệ!");
            return;
        }

        HoaDonBUS hoaDonBUS = new HoaDonBUS();
        ArrayList<HoaDonDTO> danhSachHoaDon = hoaDonBUS.getAllHoaDon();

        DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
        model.setRowCount(0); // Clear bảng

        for (HoaDonDTO hd : danhSachHoaDon) {
            boolean hopLe = true;

            // 1. Lọc khách hàng theo ID
            if (!selectedKhachHang.equals("Tất cả")) {
                String[] parts = selectedKhachHang.split(" - ", 2);
                int selectedCustomerId = Integer.parseInt(parts[0].trim());

                if (hd.getCustomerId() != selectedCustomerId) {
                    hopLe = false;
                }
            }

            // 2. Lọc nhân viên theo ID
            if (!selectedNhanVien.equals("Tất cả")) {
                String[] parts = selectedNhanVien.split(" - ", 2);
                int selectedEmployeeId = Integer.parseInt(parts[0].trim());

                if (hd.getEmployeeId() != selectedEmployeeId) {
                    hopLe = false;
                }
            }

            // 3. Lọc theo ngày
            Date ngayLap = hd.getIssueDate();
            if (tuNgay != null && ngayLap.before(tuNgay)) {
                hopLe = false;
            }
            if (denNgay != null && ngayLap.after(denNgay)) {
                hopLe = false;
            }

            // 4. Lọc theo số tiền
            double tongTien = hd.getTotal();
            if (tuTien != null && tongTien < tuTien) {
                hopLe = false;
            }
            if (denTien != null && tongTien > denTien) {
                hopLe = false;
            }

            // Nếu hợp lệ thì add vào bảng
            if (hopLe) {
                model.addRow(new Object[]{
                    hd.getId(),
                    hd.getCustomerName(),
                    hd.getEmployeeName(),
                    hd.getIssueDate(),
                    String.format("%,.0f", tongTien) // Format lại tiền
                });
            }
        }
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void btnLamMoiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLamMoiMouseClicked
        HoaDonBUS hoaDonBUS = new HoaDonBUS();
        ArrayList<HoaDonDTO> danhSachHoaDon = hoaDonBUS.getAllHoaDon();

        DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
        model.setRowCount(0); // Xóa toàn bộ dòng cũ

        for (HoaDonDTO hd : danhSachHoaDon) {
            Object[] row = new Object[]{
                hd.getId(),
                hd.getCustomerName(),
                hd.getEmployeeName(),
                hd.getIssueDate(),
                String.format("%,.0f", hd.getTotal())
            };
            model.addRow(row);
        }

        // ✅ Reset selection để không bị giữ lại dòng cũ
        tblHoaDon.clearSelection();
    }//GEN-LAST:event_btnLamMoiMouseClicked

    private void btnTimKiemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTimKiemMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnTimKiemMouseClicked

    private void txtngaydauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtngaydauActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtngaydauActionPerformed

    private void txtminpriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtminpriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtminpriceActionPerformed

    private void txtminpriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtminpriceKeyReleased
        formatCurrencyField(txtminprice);
    }//GEN-LAST:event_txtminpriceKeyReleased

    private void txtmaxpriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmaxpriceKeyReleased
        formatCurrencyField(txtmaxprice);
    }//GEN-LAST:event_txtmaxpriceKeyReleased

    private void formatCurrencyField(javax.swing.JTextField textField) {
        String text = textField.getText().replace(",", "").trim();
        if (text.isEmpty()) {
            return;
        }

        try {
            double value = Double.parseDouble(text);
            textField.setText(String.format("%,d", (long) value));
        } catch (NumberFormatException e) {
            // Nếu nhập ký tự không hợp lệ thì bỏ qua không định dạng
        }
    }

    private void setUpTable() {
        // Set ẩn hiển thị ô vuông khi bấm vào cell 
        tblHoaDon.setFocusable(false);

        // Set không cho cell có thể chỉnh sửa 
        tblHoaDon.setDefaultEditor(Object.class, null);
    }

    private void addIcon() {
        btnThemPX.setIcon(new FlatSVGIcon("./res/icon/add.svg"));
        btnXoaHD.setIcon(new FlatSVGIcon("./res/icon/delete.svg"));
        btnChiTietPX.setIcon(new FlatSVGIcon("./res/icon/detail.svg"));
        btnXuatExcelPX.setIcon(new FlatSVGIcon("./res/icon/export_excel.svg"));
        btnLamMoi.setIcon(new FlatSVGIcon("./res/icon/refresh.svg"));
    }

    private void loadHoaDonToTable() {
        danhSachHoaDon = hoaDonBUS.getAllHoaDon();

        DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
        model.setRowCount(0); // Xóa dữ liệu cũ trước khi load mới

        DecimalFormat decimalFormat = new DecimalFormat("#,##0");

        for (HoaDonDTO hd : danhSachHoaDon) {
            model.addRow(new Object[]{
                hd.getId(),
                hd.getCustomerName(),
                hd.getEmployeeName(),
                hd.getIssueDate(),
                decimalFormat.format(hd.getTotal())
            });
        }
    }

    private HoaDonDTO getSelectedRowHoaDon() {
        int selectedRowIndex = tblHoaDon.getSelectedRow();
        if (selectedRowIndex == -1 || selectedRowIndex >= danhSachHoaDon.size()) {
            return null;
        }
        return danhSachHoaDon.get(selectedRowIndex);
    }

    private void loadKhachHangToComboBox() {
        KhachHangBUS khachHangBUS = new KhachHangBUS();
        ArrayList<KhachHangDTO> listKhachHang = khachHangBUS.getAllKhachHangs();

        comboboxKH.removeAllItems();
        comboboxKH.addItem("Tất cả"); // Thêm option mặc định

        for (KhachHangDTO kh : listKhachHang) {
            comboboxKH.addItem(kh.getId() + " - " + kh.getName());
        }
    }

    private void loadNhanVienToComboBox() {
        NhanVienBUS nhanVienBUS = new NhanVienBUS();
        ArrayList<NhanVienDTO> listNhanVien = nhanVienBUS.getAllNhanViens();

        comboboxNV.removeAllItems();
        comboboxNV.addItem("Tất cả"); // Thêm option mặc định

        for (NhanVienDTO nv : listNhanVien) {
            comboboxNV.addItem(nv.getId() + " - " + nv.getName());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChiTietPX;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnThemPX;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JButton btnXoaHD;
    private javax.swing.JButton btnXuatExcelPX;
    private javax.swing.JComboBox<String> comboboxKH;
    private javax.swing.JComboBox<String> comboboxNV;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel mainContentPX;
    private javax.swing.JPanel pnlBottom;
    private javax.swing.JPanel pnlLoc;
    private javax.swing.JPanel pnlTop;
    private javax.swing.JScrollPane scpnltable;
    public javax.swing.JTable tblHoaDon;
    private javax.swing.JTextField txtTimKiem;
    private javax.swing.JTextField txtmaxprice;
    private javax.swing.JTextField txtminprice;
    private javax.swing.JTextField txtngaycuoi;
    private javax.swing.JTextField txtngaydau;
    private javax.swing.JLabel txtnhacungcap;
    private javax.swing.JLabel txtnhacungcap1;
    private javax.swing.JLabel txtnhacungcap2;
    private javax.swing.JLabel txtnhacungcap3;
    private javax.swing.JLabel txtnhacungcap4;
    private javax.swing.JLabel txtnhacungcap5;
    // End of variables declaration//GEN-END:variables

}
